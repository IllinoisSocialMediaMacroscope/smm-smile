	/*fetch('http://localhost:5050/graphql', {method:'POST',
											headers:{
												'Accept': 'application/json',
												'Content-Type':'application/json',
												redditaccesstoken:req.session.rd_access_token,
												redditrefreshtoken:req.session.rd_refresh_token,
												twtaccesstokenkey:req.session.twt_access_token_key,
												twtaccesstokensecret:req.session.twt_access_token_secret,
												esaccesstoken:req.session.es_access_token,
												esaccesstokensecret:req.session.es_access_token_secret
											},
											body:JSON.stringify({"query":req.body.query })
		}).then(function(response){
			
			return response.text();
			
		}).then(function(responseBody){
			
			var responseObj = JSON.parse(responseBody);
			
			if ("errors" in responseObj){
				res.send({ERROR:responseObj['errors'][0]['message']});
			}else{				
				
				// ------------------------------------save csv file---------------------------------------------------------
				if (req.body.filename.substr(0,19) === 'twitter-queryTweet-'){
						var processed = req.body.filename + '.csv';
						if (responseObj.data.twitter.queryTweet.length > 0){
							
							jsonexport(responseObj.data.twitter.queryTweet, {fillGaps:true,undefinedString:'NaN'},function(err,csv){
								if (err) res.send({ERROR:err});;
								if (csv != ''){
									fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL + '/' + req.body.filename + '.csv', 
										csv,'utf8',function(err){ if(err)	res.send({ERROR:err});;	});
								}
							});		
							// save json
							var raw = req.body.filename + '.json';
							fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL + '/' +  raw, JSON.stringify(responseObj,null,4),'utf8',function(err){
								if(err)	res.send({ERROR:err});
							});
							
							// save query parameters to it so history page can use it!
							fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL + '/'+  req.body.filename + '.dat',req.body.params,'utf8',function(err){
								if (err) res.send({ERROR:err});
							});	
							
						}else{
							res.send({ERROR:"Sorry, we couldn't find results that matches your query..."})
						}
				}
				else if (req.body.filename.substr(0,18) === 'twitter-queryUser-'){
					var processed = req.body.filename + '.csv';
					if (responseObj.data.twitter.queryUser.length > 0){
						jsonexport(responseObj.data.twitter.queryUser,{fillGaps:true,undefinedString:'NaN'}, function(err,csv){
							if (err) res.send({ERROR:err});;
							if (csv != ''){
								fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL + '/'+   req.body.filename + '.csv', 
									csv,'utf8',function(err){ if(err)	res.send({ERROR:err});;	});
							}
						});
						// save json
							var raw = req.body.filename + '.json';
							fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL + '/'+   raw, JSON.stringify(responseObj,null,4),'utf8',function(err){
								if(err)	res.send({ERROR:err});
							});
							
							// save query parameters to it so history page can use it!
							fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL + '/'+   req.body.filename + '.dat',req.body.params,'utf8',function(err){
								if (err) res.send({ERROR:err});
							});	
							
					}else{
						res.send({ERROR:"Sorry, we couldn't find results that matches your query..."})
					}
				}
				else if (req.body.filename.substr(0,18) === 'twitter-streaming-'){
					var processed = req.body.filename + '.csv';
					//console.log(responseObj.data.elasticSearch.streamTweet);
					if (responseObj.data.elasticSearch.streamTweet.length > 0){
						jsonexport(responseObj.data.elasticSearch.streamTweet,{fillGaps:true,undefinedString:'NaN'}, function(err,csv){
							if (err) res.send({ERROR:err});;
							if (csv != ''){
								fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL + '/'+  req.body.filename + '.csv', 
									csv,'utf8',function(err){ if(err)	res.send({ERROR:err});;	});
							}
						});
						// save json
						var raw = req.body.filename + '.json';
						fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL+ '/'+   raw, JSON.stringify(responseObj,null,4),'utf8',function(err){
							if(err)	res.send({ERROR:err});
						});
						
						// save query parameters to it so history page can use it!
						fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL+ '/'+  req.body.filename + '.dat',req.body.params,'utf8',function(err){
							if (err) res.send({ERROR:err});
						});	
						
					}else{
						res.send({ERROR:"Sorry, we couldn't find results that matches your query..."})
					}
				}
				else if (req.body.filename.substr(0,24) === 'reddit-searchSubreddits-'){
					var processed = req.body.filename + '.csv';
					if (responseObj.data.reddit.searchSubreddits.length > 0){
						jsonexport(responseObj.data.reddit.searchSubreddits, {fillGaps:true,undefinedString:'NaN'},function(err,csv){
							if (err) res.send({ERROR:err});;
							if (csv != ''){
								fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL+ '/'+   req.body.filename + '.csv', 
										csv,'utf8',function(err){ if(err)	res.send({ERROR:err});;	});
							}
						});
						// save json
						var raw = req.body.filename + '.json';
						fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL+ '/'+   raw, JSON.stringify(responseObj,null,4),'utf8',function(err){
							if(err)	res.send({ERROR:err});
						});
						
						// save query parameters to it so history page can use it!
						fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL+ '/'+   req.body.filename + '.dat',req.body.params,'utf8',function(err){
							if (err) res.send({ERROR:err});
						});	
						
					}else{
						res.send({ERROR:"Sorry, we couldn't find results that matches your query..."})
					}
				}
				else if (req.body.filename.substr(0,14) === 'reddit-search-'){
					// IF replies INCLUDED! PARSE THIS JSON DIFFERENTLY
					// in order to get documents to do topic modeling
					if ('replies' in responseObj.data.reddit.search[0]){
						// create directory
						var dir = process.env.ROOTDIR + process.env.DOWNLOAD_GRAPHQL + '/'+   req.body.filename + '/'
							if (!fs.existsSync(dir)) {
								fs.mkdirSync(dir, 0744);
							}
							
						var processed = req.body.filename + '-replies.zip';
						var zipper = new zip();
						for (var i=0, length= responseObj.data.reddit.search.length; i<length; i++){
							jsonexport(responseObj.data.reddit.search[i].replies, {fillGaps:true,undefinedString:'NaN'},function(err,csv){
								if (err) res.send({ERROR:err});;
								if (csv !== ''){ // if the file has content
									fs.writeFileSync(dir + responseObj.data.reddit.search[i].id + '.csv', 
											csv,'utf8',function(err){ if(err)	res.send({ERROR:err});;	}); //save each post's reply in a seperate CSV file, and name it after the id
										zipper.addLocalFile(dir + responseObj.data.reddit.search[i].id + '.csv');
								}
							});
						}
						zipper.writeZip(process.env.ROOTDIR + process.env.DOWNLOAD_GRAPHQL+ '/'+  processed);		
						
					}else{
						var processed = req.body.filename + '.csv';
						if (responseObj.data.reddit.search.length > 0){
							
							jsonexport(responseObj.data.reddit.search, {fillGaps:true,undefinedString:'NaN',undefinedString:'NaN'},function(err,csv){
								if (err) res.send({ERROR:err});;
								if (csv != ''){
									fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL+ '/'+   req.body.filename + '.csv', 
											csv,'utf8',function(err){ if(err)	res.send({ERROR:err});;	});
								}
							});
							// save json
							var raw = req.body.filename + '.json';
							fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL+ '/'+   raw, JSON.stringify(responseObj,null,4),'utf8',function(err){
								if(err)	res.send({ERROR:err});
							});
							
							// save query parameters to it so history page can use it!
							fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL+ '/'+  req.body.filename + '.dat',req.body.params,'utf8',function(err){
								if (err) res.send({ERROR:err});
							});	
							
						}else{
							res.send({ERROR:"Sorry, we couldn't find results that matches your query..."})
						}
						
					}
				} 
				else if (req.body.filename.substr(0,22) === 'reddit-getNewComments-'){
					var processed = req.body.filename + '.csv';
					if (responseObj.data.reddit.getNewComments.length > 0){
						jsonexport(responseObj.data.reddit.getNewComments,{fillGaps:true,undefinedString:'NaN'},function(err,csv){
							if (err) res.send({ERROR:err});;
							if (csv != ''){
								fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL+ '/'+  req.body.filename + '.csv', 
										csv,'utf8',function(err){ if(err)	res.send({ERROR:err});;	});
							}
						});
						// save json
						var raw = req.body.filename + '.json';
						fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL+ '/'+   raw, JSON.stringify(responseObj,null,4),'utf8',function(err){
							if(err)	res.send({ERROR:err});
						});
						
						// save query parameters to it so history page can use it!
						fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL+ '/'+   req.body.filename + '.dat',req.body.params,'utf8',function(err){
							if (err) res.send({ERROR:err});
						});	
						
					}else{
						res.send({ERROR:"Sorry, we couldn't find results that matches your query..."})
					}
				} 	
				else if (req.body.filename.substr(0,26) === 'reddit-getCompleteReplies-'){
					var processed = req.body.filename + '.csv';
					if(responseObj.data.reddit.getCompleteReplies.length > 0){
						jsonexport(responseObj.data.reddit.getCompleteReplies,{fillGaps:true,undefinedString:'NaN'},function(err,csv){
							if (err) res.send({ERROR:err});;
							if (csv != ''){
								fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL+ '/'+   req.body.filename + '.csv', 
										csv,'utf8',function(err){ if(err)	res.send({ERROR:err});;	});
							}
						});
						// save json
						var raw = req.body.filename + '.json';
						fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL+ '/'+   raw, JSON.stringify(responseObj,null,4),'utf8',function(err){
							if(err)	res.send({ERROR:err});
						});
						
						// save query parameters to it so history page can use it!
						fs.writeFile(process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL+ '/'+   req.body.filename + '.dat',req.body.params,'utf8',function(err){
							if (err) res.send({ERROR:err});
						});	
						
					}else{
						res.send({ERROR:"Sorry, we couldn't find results that matches your query..."})
					}
				} 
				
				
				
				res.send({
							fname:[raw,processed],
							URL:[process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL+ '/'+   raw, process.env.ROOTDIR +process.env.DOWNLOAD_GRAPHQL+ '/'+   processed]
						});

			}
			
		});*/
				